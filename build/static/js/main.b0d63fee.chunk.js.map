{"version":3,"sources":["constants/constants.js","components/TableHeading/TableHeading.js","components/TablePagination/TablePagination.js","helpers/getCalculatedIncomes.js","services/GetData.js","components/TableItem/TableItem.js","components/TableRow/TableRow.js","components/TableRows/TableRows.js","components/TableSelect/TableSelect.js","components/TableInput/TableInput.js","components/Loading/Loading.js","components/TableContent/TableContent.js","components/TableContent/index.js","App.js","serviceWorker.js","index.js"],"names":["COMPANIES_URL","ASC","TableRowItem","type","fieldName","handler","sort","isActive","className","data-type","onClick","e","target","dataset","TableHeading","sortBy","data","onClickHandler","TablePagination","currentPage","pagesAmount","filteredCompaniesAmount","companiesPerPage","paginationButtons","indexOfNewPage","Number","page","i","push","key","data-page","renderPagination","getIncomeValues","company","incomes","map","income","value","getTotalIncome","reduce","total","num","parseInt","getAverageIncome","Math","floor","length","getLastMonthIncome","dates","date","getIncomeDates","lastDate","a","b","Date","lastMonthIncome","filter","x","getCompaniesData","fetch","then","res","json","companiesData","id","name","localeCompare","getIncomesData","updatedCompanies","incomesData","currentCompanyId","currentCompanyObject","calculatedIncomes","total_income","average_income","last_month_income","Promise","all","companies","TableItem","TableRow","city","renderRow","TableRows","TableSelect","onChange","TableInput","placeholder","Loading","TableContent","props","onChangeInput","val","setState","searchValue","setDisplayedContent","onChangeSelect","onClickPagination","onClickTableHeadingSortItems","state","sortType","JSON_TYPE","toLowerCase","sortByNumber","reverse","sortByString","sortByIncomes","newDisplayedContent","beginIndex","endIndex","list","obj","Object","keys","some","toString","includes","amount","slice","filterContent","displayedContent","getFullCompaniesData","this","Fragment","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b0d63fee.chunk.js","sourcesContent":["export const COMPANIES_URL = 'https://recruitment.hal.skygate.io/companies'\nexport const COMPANIES_DETAILS_URL = `https://recruitment.hal.skygate.io/incomes`\n\nexport const ASC = 'ASC'\nexport const DESC = 'DESC'\n\nexport const ID = 'ID'\nexport const NAME = 'NAME'\nexport const CITY = 'CITY'\nexport const TOTAL_INCOME = 'TOTAL_INCOME'\nexport const AVERAGE_INCOME = 'AVERAGE_INCOME'\nexport const LAST_MONTH_INCOME = 'LAST_MONTH_INCOME'","import React from 'react';\nimport {AVERAGE_INCOME, CITY, ID, LAST_MONTH_INCOME, NAME, TOTAL_INCOME, ASC} from \"../../constants/constants\";\nimport './_TableHeading.scss'\n\nconst TableRowItem = ({type, fieldName, handler, sort}) => {\n    const isActive = type === sort\n    return(\n        <div className={\n            'table_row_item '\n            + (isActive ? 'active ' : '')\n            + (sort === ASC ? 'asc ' : 'desc ')\n        } data-type={type} onClick={(e) => handler(e.target.dataset.type)}>{fieldName}</div>\n    )\n}\n\nconst TableHeading = ({handler, data}) => {\n    const { sortBy } = data\n    const onClickHandler = (type) => handler(type)\n    return(\n        <div className=\"table table_heading\">\n            <div className=\"table_row\">\n                <TableRowItem sort={sortBy} type={ID} fieldName=\"ID\" handler={onClickHandler}/>\n                <TableRowItem sort={sortBy} type={NAME} fieldName=\"Name\" handler={onClickHandler}/>\n                <TableRowItem sort={sortBy} type={CITY} fieldName=\"City\" handler={onClickHandler}/>\n                <TableRowItem sort={sortBy} type={TOTAL_INCOME} fieldName=\"Total Income\" handler={onClickHandler}/>\n                <TableRowItem sort={sortBy} type={AVERAGE_INCOME} fieldName=\"Average Income\" handler={onClickHandler}/>\n                <TableRowItem sort={sortBy} type={LAST_MONTH_INCOME} fieldName=\"Last month income\" handler={onClickHandler}/>\n            </div>\n        </div>\n    )\n}\nexport default TableHeading","import React, { useState } from 'react'\nimport './_TablePagination.scss'\nconst TablePagination = ({data, handler}) => {\n    const { currentPage, filteredCompaniesAmount, companiesPerPage } = data\n    const pagesAmount = filteredCompaniesAmount / companiesPerPage\n\n    const paginationButtons = [];\n    const onClickHandler = (e) => {\n        const indexOfNewPage = Number(e.target.dataset.page)\n        handler(indexOfNewPage)\n    }\n\n    const renderPagination = () => {\n        let i = 0\n        do{\n            i++\n            paginationButtons.push(\n                <li\n                    key={i}\n                    data-page={i}\n                    onClick={(e) => onClickHandler(e)}\n                    className={(i === currentPage? 'active ' : '') + 'pagination_item'}>\n                    {i}\n                </li>)\n        }while(i <= pagesAmount - 1)\n        return <ul className='pagination'>\n            {paginationButtons}\n        </ul>\n    }\n\n    return (\n        renderPagination()\n    )\n}\nexport default TablePagination","// Get specified parts of object\nconst getIncomeValues = (company) => company.incomes.map((income) => income.value)\nconst getIncomeDates = (company) => company.incomes.map(income => income.date)\n\n// Calculate desired values\nexport const getTotalIncome = company => {\n    const incomes = getIncomeValues(company)\n    return incomes.reduce((total, num) => parseInt(total) + parseInt(num))\n}\nexport const getAverageIncome = company => {\n    const incomes = getIncomeValues(company)\n    return incomes.reduce((total, num) => Math.floor(parseInt(total) + parseInt(num) / incomes.length))\n}\nexport const getLastMonthIncome = company => {\n    // Get and sort dates\n    const dates = getIncomeDates(company)\n    const sortedDates = dates.sort((a,b) => new Date(b.date) - new Date(a.date))\n    // Find latest date\n    const lastDate = sortedDates[dates.length - 1]\n    // Find income object with latest date and get value of it)\n    const lastMonthIncome = company.incomes.filter(x => x.date === lastDate)\n    return Math.floor(lastMonthIncome[0].value)\n}","import { COMPANIES_URL, COMPANIES_DETAILS_URL } from \"../constants/constants\";\nimport { getLastMonthIncome, getAverageIncome, getTotalIncome } from \"../helpers/getCalculatedIncomes\";\n\n// Get simple data about companies and set app initial state\nexport async function getCompaniesData() {\n    // const { companiesPerPage, currentPage } = this.state.settings\n    const companiesData = await fetch(COMPANIES_URL).then(res => res.json());\n    // Sort companies by id\n    companiesData.sort(function(a, b) {\n        return a.id - b.id  ||  a.name.localeCompare(b.name);\n    });\n    return companiesData\n}\n\n// Get detailed data for companies that are currently displayed\nexport async function getIncomesData(data) {\n    const updatedCompanies = data.map(async company => {\n        const incomesData = fetch(`${COMPANIES_DETAILS_URL}/${company.id}`)\n            .then(res => res.json())\n            .then(res => {\n                // Copy displayedCompanies data\n                const companiesData = data;\n                const currentCompanyId = res.id;\n                // Find company of current id and set key with detailed data to it\n                const currentCompanyObject = companiesData.filter(x => x.id === currentCompanyId)\n                // To the found object add fetched incomes\n                currentCompanyObject[0].incomes = res.incomes\n                // Get needed values and asign them\n                currentCompanyObject[0].calculatedIncomes = {\n                    total_income: getTotalIncome(company),\n                    average_income: getAverageIncome(company),\n                    last_month_income: getLastMonthIncome(company)\n                }\n                return currentCompanyObject[0]\n            })\n        return incomesData\n    })\n    return await Promise.all(updatedCompanies)\n}\n\nexport async function getFullCompaniesData(){\n    let companies = await getCompaniesData() // Get simple list of companies\n    return await getIncomesData(companies) // return list of companies with incomes included\n}","import React from 'react';\n\nconst TableItem = ({data}) => {\n    return(\n        <div className='table_row_item income'>{data}</div>\n    )\n}\n\nexport default TableItem\n","import React from \"react\";\nimport TableItem from \"../TableItem/TableItem\";\nimport './_TableRow.scss'\n\nconst TableRow = ({data}) => {\n    const renderRow = () => {\n        const { id, name, city, calculatedIncomes } = data\n        const { total_income, average_income, last_month_income } = calculatedIncomes\n        return (\n            <div className='table_row' key={id}>\n                <TableItem data={id} />\n                <TableItem data={name} />\n                <TableItem data={city}/>\n                <TableItem data={total_income}/>\n                <TableItem data={average_income}/>\n                <TableItem data={last_month_income}/>\n        </div>\n        )\n    }\n    return renderRow()\n}\nexport default TableRow","import React from 'react';\nimport TableRow from \"../TableRow/TableRow\";\n\nconst TableRows = ({data}) => {\n    return (\n        <div className='table'>\n            {data.map(company => <TableRow key={company.id} data={company}/>)}\n        </div>\n    )\n}\nexport default TableRows","import React from 'react'\nimport './_TableSelect.scss'\n\nconst TableSelect = ({handler}) => {\n    return (\n        <select className=\"table_amountbox\" onChange={(e) => handler(e.target.value)}>\n            <option value=\"25\">25</option>\n            <option value=\"50\">50</option>\n            <option value=\"70\">75</option>\n            <option value=\"100\">100</option>\n        </select>\n    )\n}\nexport default TableSelect","import React from \"react\";\nimport './_TableInput.scss'\n\nconst TableInput = ({handler}) => <input type=\"text\" className='table_searchbox' placeholder='Search...' onChange={e => handler(e.target.value)}/>\nexport default TableInput","import React from \"react\";\nimport './_Loading.scss'\nconst Loading = () => <div className=\"refreshWrapper\"><div className=\"refresh\"></div></div>\nexport default Loading","import React, {Component} from 'react';\nimport TableHeading from \"../TableHeading/TableHeading\";\nimport TablePagination from \"../TablePagination/TablePagination\";\nimport {getFullCompaniesData} from \"../../services/GetData\";\nimport TableRows from \"../TableRows/TableRows\";\nimport {filterContent, sortByIncomes, sortByNumber, sortByString} from './index'\nimport './_TableContent.scss'\nimport {\n    ASC,\n    AVERAGE_INCOME,\n    CITY,\n    DESC,\n    ID,\n    LAST_MONTH_INCOME,\n    NAME,\n    TOTAL_INCOME,\n} from \"../../constants/constants\";\nimport TableSelect from \"../TableSelect/TableSelect\";\nimport TableInput from \"../TableInput/TableInput\";\nimport Loading from \"../Loading/Loading\";\n\nclass TableContent extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            searchValue: '',\n            currentPage: 1,\n            companies: [],\n            companiesPerPage: 25,\n            displayedContent: [],\n            filteredCompaniesAmount: 0,\n            sortBy: ID,\n            sortType: ASC\n        }\n    }\n\n    onChangeInput = val => this.setState({searchValue: val}, () => this.setDisplayedContent())\n    onChangeSelect = val => this.setState({companiesPerPage: parseInt(val), currentPage: 1}, () => this.setDisplayedContent())\n    onClickPagination = num => this.setState({currentPage: num}, () => this.setDisplayedContent())\n    onClickTableHeadingSortItems = type => {\n        const { sortBy, sortType, companies } = this.state\n        const JSON_TYPE = type.toLowerCase()\n        if(type === ID) sortByNumber(companies, sortBy, sortType, JSON_TYPE, type)\n        if(type === NAME || type === CITY) sortByString(companies, sortBy, sortType, JSON_TYPE, type)\n        if(type == TOTAL_INCOME || type === AVERAGE_INCOME || type === LAST_MONTH_INCOME) sortByIncomes(companies, sortBy, sortType, JSON_TYPE, type)\n        this.setState({sortType: sortType === ASC ? DESC : ASC, sortBy: type}, () => this.setDisplayedContent())\n    }\n\n    componentDidMount(){\n        getFullCompaniesData()\n            .then(res => this.setState({companies: res, displayedContent: res}))\n            .then(() => this.setDisplayedContent())\n    }\n    setDisplayedContent = () => {\n        const { searchValue, currentPage, companies, companiesPerPage } = this.state\n        const newDisplayedContent = filterContent(searchValue, currentPage, companies, companiesPerPage)\n        this.setState({displayedContent: newDisplayedContent.list, filteredCompaniesAmount: newDisplayedContent.amount})\n    }\n    render() {\n        const { onClickPagination, onChangeSelect, onClickTableHeadingSortItems, onChangeInput } = this\n        const { currentPage, displayedContent, filteredCompaniesAmount, companiesPerPage, sortBy, sortType } = this.state\n        return(\n            <React.Fragment>\n                <div className='table_wrapper'>\n                    <TableHeading data={{sortBy, sortType}} handler={onClickTableHeadingSortItems}/>\n                    <TableInput handler={onChangeInput}/>\n                    <TableSelect handler={onChangeSelect}/>\n                    {this.state.companies.length === 0 ? <Loading/> : <TableRows data={displayedContent}/>}\n                </div>\n                <TablePagination data={{currentPage, filteredCompaniesAmount, companiesPerPage}} handler={onClickPagination}/>\n            </React.Fragment>\n        )\n    }\n}\nexport default TableContent","import {ASC, DESC} from \"../../constants/constants\";\n\nexport const filterContent = (searchValue, currentPage, companies, companiesPerPage) => {\n    const beginIndex = (currentPage - 1) * companiesPerPage\n    const endIndex = beginIndex + companiesPerPage\n    let newDisplayedContent = {};\n    if(searchValue.length > 0){\n        newDisplayedContent.list = companies.filter(obj => Object.keys(obj).some(key => {\n            if(key === 'id' || key === 'name'|| key === 'city') {\n                return obj[key].toString().toLowerCase().includes(searchValue.toLowerCase())\n            }\n            // if(key === 'calculatedIncomes'){\n            //     obj.calculatedIncomes.some(key => {\n            //         return obj[key].toString().includes(searchValue)\n            //     });\n            // }\n        }));\n\n        newDisplayedContent.amount = newDisplayedContent.list.length\n        newDisplayedContent.list = newDisplayedContent.list.slice(beginIndex, endIndex)\n    }else{\n        newDisplayedContent.list = companies.slice(beginIndex, endIndex)\n        newDisplayedContent.amount = companies.length\n    }\n    return newDisplayedContent\n}\nexport const sortByNumber = (companies, sortBy, sortType, JSON_TYPE, type) => {\n    companies.sort(function(a, b) {\n        if(sortBy !== type || sortType === DESC) {\n            return a[JSON_TYPE] - b[JSON_TYPE]\n        }\n        if(sortBy === type && sortType === ASC) {\n            return b[JSON_TYPE] - a[JSON_TYPE]\n        }\n    })\n}\nexport const sortByString = (companies, sortBy, sortType, JSON_TYPE, type) => {\n    if(sortBy !== type || sortType === DESC) companies.sort((a,b) => (a[JSON_TYPE] > b[JSON_TYPE]) ? 1 : ((b[JSON_TYPE] > a[JSON_TYPE]) ? -1 : 0));\n    if(sortBy !== type || sortType === ASC) companies.sort((a,b) => (a[JSON_TYPE] > b[JSON_TYPE]) ? 1 : ((b[JSON_TYPE] > a[JSON_TYPE]) ? -1 : 0)).reverse();\n}\nexport const sortByIncomes = (companies, sortBy, sortType, JSON_TYPE, type) => {\n    companies.sort(function(a, b) {\n        if(sortBy !== type || sortType === DESC) return a.calculatedIncomes[JSON_TYPE] - b.calculatedIncomes[JSON_TYPE]\n        if(sortBy === type && sortType === ASC) return b.calculatedIncomes[JSON_TYPE] - a.calculatedIncomes[JSON_TYPE]\n    });\n}","import React, { Component } from 'react';\nimport './App.scss';\nimport TableContent from \"./components/TableContent/TableContent\";\nconst App = () => {\n    return(\n        <div className='app_wrapper'>\n            <h1>Check out best companies!</h1>\n            <TableContent />\n        </div>\n    )\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}